<style>
label {
  display: inline-block;
}

.container {
		width: 40%;
		margin: auto;
}

.col-75 {
  margin-top: 2px;
}

.submit {
	width: 20%; 
	margin: auto;
	text-align: center;
}
</style>

<!--admin create classes -->
<h4><u>New Class Creation</u></h4>

	<div class="container">
		<form method="POST" action="classes/create">
				<div class="row">
				<div class="col-25">
					<label for="class_id">Class ID</label>
				</div>
				<div class="col-75">
					<select id="class_id" name="class_id" required>
					<option value="empty"></option>
					</select>
				</div>
				</div>
				<br>

				<div class="row">
				<div class="col-25">
					<label for="course_id">Course ID</label>
				</div>
				<div class="col-75">
					<select id="course_id" name="course_id" required>
					<option value="empty"></option>
					</select>
				</div>
				</div>
				<br>

				<div class="row">
				<div class="col-25">
					<label for="time">Timing</label>
				</div>
				<div class="col-75">
					<select id="time" name="time" required>
					<option value="0930">0930AM</option>
					<option value="1130">1130AM</option>
					<option value="1230">1230PM</option>
					<option value="1400">1400PM</option>
					<option value="1500">1500PM</option>
					</select>
				</div>
				</div>
				<br>

				<div class="row">
				<div class="col-25">
					<label for="date">Date</label>
				</div>
				<div class="col-75">
					<select id="date" name="date" required>
					<option value="235">23/5/2022</option>
					<option value="295">29/5/2022</option>
					<option value="166">16/6/2022</option>
					<option value="307">30/7/2022</option>
					<option value="266">26/6/2022</option>
					<option value="276">27/6/2022</option>
					<option value="265">26/5/2022</option>
					<option value="165">16/5/2022</option>
					</select>
				</div>
				</div>
				<br>
		</form>
		</div>
		<div class="submit">
			<button class="btn btn-primary waves-effect">+ Create</button>
			<!--<input type="submit value="Submit">-->
		</div>


<!-- 
	
models/Classes.js [Creating Classes Table]

const Sequelize = require('sequelize');
const db = require('../config/DBConfig');

// Create videos table in MySQL Database 
const Classes = db.define('Classes',
    {
        course_id: { type: Sequelize.INTEGER }, 
        class_id: { type: Sequelize.INTEGER }, 
        name: { type: Sequelize.STRING }, 
        difficulty: { type: Sequelize.STRING }, 
        time: { type: Sequelize.STRING }, 
        date: { type: Sequelize.DATE },
        class: { type: Sequelize.STRING }
    }); 
    
module.exports = Classes;

config/DBConnection.js [Connection between users and classes]

const mySQLDB = require('./DBConfig');
const User = require('../models/User'); 
const Classes = require('../models/Classes'); 


// If drop is true, all existing tables are dropped and recreated
const setUpDB = (drop) => { 
    mySQLDB.authenticate()
    .then(() => {
        console.log('Database connected'); 
        /* Defines the relationship where a user has many videos. 
        The primary key from user will be a foreign key in video. 
        */ 
       User.hasMany(Classes);
       Classes.belongsTo(User); 
       mySQLDB.sync({ 
        force: drop 
        }); 
    }) 
    .catch(err => console.log(err)); 
}; 

module.exports = { setUpDB };

config/DBConfig.js

const Sequelize = require('sequelize');

require('dotenv').config(); 

// Instantiates Sequelize with database parameters 
const sequelize = new Sequelize(
    process.env.DB_NAME, 
    process.env.DB_USER, 
    process.env.DB_PWD, 
    {
        host: process.env.DB_HOST, // Name or IP of MySQL server
        dialect: 'mysql', // Tells squelize that MySQL is used 
        logging: false, // Disable logging; default: console.log 
        pool: {
            max: 5, min: 0, acquire: 30000, idle: 10000 
        },
        timezone: '+08:00' 
    } 
); 
module.exports = sequelize;
-->